* What is ORM?
    ORM (Object-Relational Mapping) is a technique that helps you interact with a database using Java objects instead of writing SQL queries directly.
    üî∏ For example:
    You have a User class in Java.
    Instead of writing SQL queries like SELECT * FROM users, ORM lets you do something like userRepository.findAll() in Java.
    ORM converts:
    Java objects ‚û°Ô∏è Database tables
    Java fields ‚û°Ô∏è Table columns

* What is JPA?
    JPA (Java Persistence API) is a standard or specification for ORM in Java.
    üîπ Think of JPA as a set of rules or interfaces that define how Java objects should be mapped to a database.
    But JPA itself is just a guideline ‚Äî it needs a provider to work (like Hibernate).

* Why JPA Was Introduced
    1. Writing plain JDBC code (like ResultSet, Statement, etc.) was boilerplate-heavy and error-prone.
    2. ORM tools like Hibernate made this easier, but needed a standard API ‚Üí JPA was created.
    3. JPA is a specification, not a tool; Hibernate is the most popular implementation

* What is Spring Data JPA?
    Spring Data JPA is a part of Spring Framework that makes working with JPA even easier.
    It adds:
        Repository interfaces like CrudRepository, JpaRepository
        Auto implementation of common queries
        Cleaner and faster development

*   | Concept              | Description                               |
    | -------------------- | ----------------------------------------- |
    | `@Entity`            | Class mapped to a table in DB             |
    | `@Id`                | Primary key of the entity                 |
    | `@GeneratedValue`    | Auto-generate primary key                 |
    | `@Column`            | Maps a field to a DB column               |
    | `@Table(name="...")` | (Optional) Specify custom table name      |
    | `@Repository`        | Marks DAO layer (can use `JpaRepository`) |

* Internally, JpaRepository extends PagingAndSortingRepository, which itself extends CrudRepository. This means the repo inherits many useful methods for data access.

* DSL = Domain-Specific Language
    It's a custom query language designed specifically for working with domain entities.
    When you write method names like findByEmailAndAge(), JPA interprets them using a DSL that maps method names to SQL queries based on the domain model (your entity classes).
    So instead of writing raw SQL or JPQL, you use intuitive method names, and Spring Data JPA does the heavy lifting.

* Spring Data JPA ‚Äì Method Queries & DSL(Domain Specific Language)
    How it works:
    JPA parses the method name (findByName) using reflection.
    It identifies name as a property in the Student entity.
    It generates the corresponding SQL query under the hood.

* Naming Keywords that Can be Used:
    Keyword	            Meaning
    findBy	            Basic query
    And, Or	Combine     multiple conditions
    Between	            Range queries
    Like	            Pattern matching (% syntax)
    OrderBy	            Sorting
    In	                Matching multiple values 
    and many other keywords
    Eg.:
        List<Student> findByNameAndAge(String name, int age);
        Becomes: SELECT * FROM student WHERE name = ? AND age = ?

    These are called JPQL Java Persistence Query Language    